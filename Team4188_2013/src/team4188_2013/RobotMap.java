// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package team4188_2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
        /* DAR I don't think these static methods and variables are appropriate in this class.
       RobotMap is understood to be a place for setting system-wide constants, not implementing
       functionality, isn't it?  Would these be better in RobotMain?
       */
    private static final double MAX_ANGLE = 54.0;
    private static double currentAngle = MAX_ANGLE,      //MAX ANGLE?
            //pan trim is in degrees off center, speed is in rps
            panTrim = -1.0, speedTrim = 1.5;
    
    private static String pilotMode = "Manual Driving",
            copilotMode = "Manual Aiming";
    private static int prevCopilotXScale = 2;// driveTrainMode = 0;
    //private static Shooter.SpeedMode shooterVoltage = Shooter.SpeedMode.kLow;
    private static double shooterSpeed = 0.0;
    private static boolean driveReverse = false;
    
    public static double getCurrentAngle() {return MAX_ANGLE;}              // this is temp. - change to currentAngle if you want manual control...
    public static void setCurrentAngle(double angle) {currentAngle = angle;}
    public static double getPanTrim() {return panTrim;}
    public static void setPanTrim(double trim) {panTrim = trim;}
    public static double getSpeedTrim() {return speedTrim;}
    public static void setSpeedTrim(double trim) {speedTrim = trim;}
    //public static int getDriveTrainMode() {return driveTrainMode;}
    //public static void setDriveTrainMode(int newMode) {driveTrainMode = newMode;}
    
    public static String getPilotMode() {return pilotMode;}
    public static String getCopilotMode() {return copilotMode;}
    public static int getPrevCopilotXScale() {return prevCopilotXScale;}
    public static void setPilotMode(String newMode) {pilotMode = newMode;}
    public static void setCopilotMode(String newMode) {copilotMode = newMode;}
    public static void setPrevCopilotXScale(int newScale) {prevCopilotXScale = newScale;}
    //public static void setShooterSpeed(Shooter.SpeedMode voltage) {shooterVoltage = voltage;}
    //public static Shooter.SpeedMode getShooterSpeed() {return shooterVoltage;}
    public static void setShooterSpeed(double speed) {shooterSpeed = speed;}
    public static double getShooterSpeed() {return shooterSpeed;}
    // true is for reverse, false is for forward
    public static void setDriveReverse(boolean set) {driveReverse = set;}
    public static boolean getDriveReverse() {return driveReverse;}
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Gyro drivetrainGyro;
    public static CANJaguar drivetrainFrontLeft;
    public static CANJaguar drivetrainRearLeft;
    public static CANJaguar drivetrainFrontRight;
    public static CANJaguar drivetrainRearRight;
    public static CorpsRobotDrive drivetrainRobotDrive;
    public static Encoder drivetrainEncoder1;
    public static Encoder drivetrainEncoder2;
    public static Encoder drivetrainEncoder3;
    public static Encoder drivetrainEncoder4;
    public static Compressor pneumaticsCompressor;
    public static CANJaguar shooterWheel1;
    public static CANJaguar shooterWheel2;
    public static CANJaguar shooterTilt;
    public static Encoder shooterTiltEncoder;
    public static DigitalInput shooterTiltBottomSw;
    public static DigitalInput shooterTiltTopSw;
    public static Solenoid shooterFeederSol;
    public static DigitalInput shooterFeederIn;
    public static DigitalInput shooterFeederOut;
    public static DigitalInput shooterFrisbeeLoadedSw;
    public static DigitalInput shooterFrisbeeOutSw;
    public static Relay retrieverSpike1;
    public static Relay retrieverSpike2;
    public static Solenoid retrieverHopperSol;
    public static DigitalInput retrieverHopperIn;
    public static DigitalInput retrieverHopperOut;
    public static Solenoid retrieverDeploySol;
    public static DigitalInput retrieverDeployIn;
    public static DigitalInput retrieverDeployOut;
    public static DigitalInput retrieverFrisbeeInSw;
    public static Solenoid climberSol1;
    public static DigitalInput climberCyl1In;
    public static DigitalInput climberCyl1Out;
    public static Solenoid climberSol2;
    public static DigitalInput climberCyl2In;
    public static DigitalInput climberCyl2Out;
    public static Solenoid climberSol3;
    public static DigitalInput climberCyl3In;
    public static DigitalInput climberCyl3Out;
    public static Solenoid climberSol4;
    public static AnalogChannel climberCyl4In;
    public static AnalogChannel climberCyl4Out;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final double aS=0.25;
    public static final double sS=0.5;
    public static final double turnSpeed=110;
    public static final double
            xNegDeadZone=-1,
            xPosDeadZone=1,
            yNegDeadZone=-1,
            yPosDeadZone=1,
            zNegDeadZone=-1,
            zPosDeadZone=1;        
    public static final int
            xMult=2,
            yMult=2,
            twistMult=3;
    public static boolean 
            fOM=false,
            onTarget=false;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainGyro = new Gyro(1, 1);
	LiveWindow.addSensor("Drivetrain", "Gyro", drivetrainGyro);
        drivetrainGyro.setSensitivity(0.0070);
        try { 
            drivetrainFrontLeft = new CANJaguar(11);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            drivetrainRearLeft = new CANJaguar(12);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            drivetrainFrontRight = new CANJaguar(13);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            drivetrainRearRight = new CANJaguar(14);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        drivetrainRobotDrive = new CorpsRobotDrive(drivetrainFrontLeft, drivetrainRearLeft,
              drivetrainFrontRight, drivetrainRearRight);
	
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivetrainEncoder1 = new Encoder(2, 1, 2, 2, false, EncodingType.k2X);
	LiveWindow.addSensor("Drivetrain", "Encoder1", drivetrainEncoder1);
        drivetrainEncoder1.setDistancePerPulse(1.0);
        drivetrainEncoder1.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder1.start();
        drivetrainEncoder2 = new Encoder(2, 3, 2, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Encoder2", drivetrainEncoder2);
        drivetrainEncoder2.setDistancePerPulse(1.0);
        drivetrainEncoder2.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder2.start();
        drivetrainEncoder3 = new Encoder(2, 5, 2, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Encoder3", drivetrainEncoder3);
        drivetrainEncoder3.setDistancePerPulse(1.0);
        drivetrainEncoder3.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder3.start();
        drivetrainEncoder4 = new Encoder(2, 7, 2, 8, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Encoder4", drivetrainEncoder4);
        drivetrainEncoder4.setDistancePerPulse(1.0);
        drivetrainEncoder4.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder4.start();
        pneumaticsCompressor = new Compressor(1, 1, 1, 1);
	
        
        try { 
            shooterWheel1 = new CANJaguar(15);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            shooterWheel2 = new CANJaguar(16);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            shooterTilt = new CANJaguar(17);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        shooterTiltEncoder = new Encoder(1, 2, 1, 3, false, EncodingType.k2X);
	LiveWindow.addSensor("Shooter", "TiltEncoder", shooterTiltEncoder);
        shooterTiltEncoder.setDistancePerPulse(1.0);
        shooterTiltEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        shooterTiltEncoder.start();
        shooterTiltBottomSw = new DigitalInput(1, 4);
	LiveWindow.addSensor("Shooter", "TiltBottomSw", shooterTiltBottomSw);
        
        shooterTiltTopSw = new DigitalInput(1, 5);
	LiveWindow.addSensor("Shooter", "TiltTopSw", shooterTiltTopSw);
        
        shooterFeederSol = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "FeederSol", shooterFeederSol);
        
        shooterFeederIn = new DigitalInput(1, 6);
	LiveWindow.addSensor("Shooter", "FeederIn", shooterFeederIn);
        
        shooterFeederOut = new DigitalInput(1, 7);
	LiveWindow.addSensor("Shooter", "FeederOut", shooterFeederOut);
        
        shooterFrisbeeLoadedSw = new DigitalInput(1, 13);
	LiveWindow.addSensor("Shooter", "FrisbeeLoadedSw", shooterFrisbeeLoadedSw);
        
        shooterFrisbeeOutSw = new DigitalInput(1, 14);
	LiveWindow.addSensor("Shooter", "FrisbeeOutSw", shooterFrisbeeOutSw);
        
        retrieverSpike1 = new Relay(1, 2);
	LiveWindow.addActuator("Retriever", "Spike1", retrieverSpike1);
        
        retrieverSpike2 = new Relay(1, 3);
	LiveWindow.addActuator("Retriever", "Spike2", retrieverSpike2);
        
        retrieverHopperSol = new Solenoid(1, 2);
	LiveWindow.addActuator("Retriever", "HopperSol", retrieverHopperSol);
        
        retrieverHopperIn = new DigitalInput(1, 8);
	LiveWindow.addSensor("Retriever", "HopperIn", retrieverHopperIn);
        
        retrieverHopperOut = new DigitalInput(1, 9);
	LiveWindow.addSensor("Retriever", "HopperOut", retrieverHopperOut);
        
        retrieverDeploySol = new Solenoid(1, 3);
	LiveWindow.addActuator("Retriever", "DeploySol", retrieverDeploySol);
        
        retrieverDeployIn = new DigitalInput(1, 10);
	LiveWindow.addSensor("Retriever", "DeployIn", retrieverDeployIn);
        
        retrieverDeployOut = new DigitalInput(1, 11);
	LiveWindow.addSensor("Retriever", "DeployOut", retrieverDeployOut);
        
        retrieverFrisbeeInSw = new DigitalInput(1, 12);
	LiveWindow.addSensor("Retriever", "FrisbeeInSw", retrieverFrisbeeInSw);
        
        climberSol1 = new Solenoid(1, 4);
	LiveWindow.addActuator("Climber", "Sol1", climberSol1);
        
        climberCyl1In = new DigitalInput(2, 9);
	LiveWindow.addSensor("Climber", "Cyl1In", climberCyl1In);
        
        climberCyl1Out = new DigitalInput(2, 10);
	LiveWindow.addSensor("Climber", "Cyl1Out", climberCyl1Out);
        
        climberSol2 = new Solenoid(1, 5);
	LiveWindow.addActuator("Climber", "Sol2", climberSol2);
        
        climberCyl2In = new DigitalInput(2, 11);
	LiveWindow.addSensor("Climber", "Cyl2In", climberCyl2In);
        
        climberCyl2Out = new DigitalInput(2, 12);
	LiveWindow.addSensor("Climber", "Cyl2Out", climberCyl2Out);
        
        climberSol3 = new Solenoid(1, 6);
	LiveWindow.addActuator("Climber", "Sol3", climberSol3);
        
        climberCyl3In = new DigitalInput(2, 13);
	LiveWindow.addSensor("Climber", "Cyl3In", climberCyl3In);
        
        climberCyl3Out = new DigitalInput(2, 14);
	LiveWindow.addSensor("Climber", "Cyl3Out", climberCyl3Out);
        
        climberSol4 = new Solenoid(1, 7);
	LiveWindow.addActuator("Climber", "Sol4", climberSol4);
        
        climberCyl4In = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Climber", "Cyl4In", climberCyl4In);
        
        climberCyl4Out = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Climber", "Cyl4Out", climberCyl4Out);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
