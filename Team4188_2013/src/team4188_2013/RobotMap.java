// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package team4188_2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static int panX = 1, panY = 2;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar drivetrainFrontLeft;
    public static CANJaguar drivetrainRearLeft;
    public static CANJaguar drivetrainFrontRight;
    public static CANJaguar drivetrainRearRight;
    public static Gyro drivetrainGyro;
    public static CorpsRobotDrive drivetrainRobotDrive;
    public static Encoder drivetrainEncoder1;
    public static Encoder drivetrainEncoder2;
    public static Encoder drivetrainEncoder3;
    public static Encoder drivetrainEncoder4;
    public static CANJaguar shooterfirstWheel;
    public static CANJaguar shootersecondWheel;
    public static CANJaguar shootertilt;
    public static Encoder shootertiltEncoder;
    public static DigitalInput shootertiltBottomSw;
    public static DigitalInput shootertiltTopSw;
    public static Relay shooterfeederSol;
    public static DigitalInput shooterfeederIn;
    public static DigitalInput shooterfeederOut;
    public static DigitalInput shooterfrisbeeLoadedSw;
    public static DigitalInput shooterfrisbeeOutSw;
    public static Relay shooterfrisbeePushSol;
    public static Relay retrieverSpike1;
    public static Relay retrieverSpike2;
    public static DigitalInput retrieverhopperIn;
    public static DigitalInput retrieverhopperOut;
    public static DigitalInput retrieverdeployIn;
    public static DigitalInput retrieverdeployOut;
    public static DigitalInput retrieverfrisbeeInSw;
    public static Relay retrieverdeploySol;
    public static Relay retrieverhopperSol;
    public static Compressor climberCompressor;
    public static DoubleSolenoid climbersmallSol;
    public static DigitalInput climbersmallIn;
    public static DigitalInput climbersmallOut;
    public static DoubleSolenoid climbertallBottomSol;
    public static DigitalInput climbertallBottomIn;
    public static DigitalInput climbertallBottomOut;
    public static DoubleSolenoid climbertallTopSol;
    public static DigitalInput climbertallTopIn;
    public static DigitalInput climbertallTopOut;
    public static DoubleSolenoid climbersliderSol;
    public static AnalogChannel climbersliderIn;
    public static AnalogChannel climbersliderOut;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final double aS=0.25;
    public static final double sS=0.5;
    public static final double turnSpeed=110;
    public static final double
            xNegDeadZone=-1,
            xPosDeadZone=1,
            yNegDeadZone=-1,
            yPosDeadZone=1,
            zNegDeadZone=-1,
            zPosDeadZone=1;        
    public static final int
            xMult=2,
            yMult=2,
            twistMult=3;
    public static boolean 
            fOM=false,
            onTarget=false;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
            drivetrainFrontLeft = new CANJaguar(11);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            drivetrainRearLeft = new CANJaguar(13);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            drivetrainFrontRight = new CANJaguar(12);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            drivetrainRearRight = new CANJaguar(14);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        drivetrainGyro = new Gyro(1, 1);
	LiveWindow.addSensor("Drivetrain", "Gyro", drivetrainGyro);
        drivetrainGyro.setSensitivity(0.007);
        drivetrainRobotDrive = new CorpsRobotDrive(drivetrainFrontLeft, drivetrainRearLeft,
              drivetrainFrontRight, drivetrainRearRight);
	
        drivetrainRobotDrive.setSafetyEnabled(false);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivetrainEncoder1 = new Encoder(2, 1, 2, 2, false, EncodingType.k2X);
	LiveWindow.addSensor("Drivetrain", "Encoder1", drivetrainEncoder1);
        drivetrainEncoder1.setDistancePerPulse(1.0);
        drivetrainEncoder1.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder1.start();
        drivetrainEncoder2 = new Encoder(2, 3, 2, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Encoder2", drivetrainEncoder2);
        drivetrainEncoder2.setDistancePerPulse(1.0);
        drivetrainEncoder2.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder2.start();
        drivetrainEncoder3 = new Encoder(2, 5, 2, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Encoder3", drivetrainEncoder3);
        drivetrainEncoder3.setDistancePerPulse(1.0);
        drivetrainEncoder3.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder3.start();
        drivetrainEncoder4 = new Encoder(2, 7, 2, 8, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Encoder4", drivetrainEncoder4);
        drivetrainEncoder4.setDistancePerPulse(1.0);
        drivetrainEncoder4.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainEncoder4.start();
        try { 
            shooterfirstWheel = new CANJaguar(16);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            shootersecondWheel = new CANJaguar(17);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            shootertilt = new CANJaguar(15);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        shootertiltEncoder = new Encoder(1, 2, 1, 3, false, EncodingType.k2X);
	LiveWindow.addSensor("Shooter", "tiltEncoder", shootertiltEncoder);
        shootertiltEncoder.setDistancePerPulse(1.0);
        shootertiltEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        shootertiltEncoder.start();
        shootertiltBottomSw = new DigitalInput(1, 4);
	LiveWindow.addSensor("Shooter", "tiltBottomSw", shootertiltBottomSw);
        
        shootertiltTopSw = new DigitalInput(1, 5);
	LiveWindow.addSensor("Shooter", "tiltTopSw", shootertiltTopSw);
        
        shooterfeederSol = new Relay(1, 6);
	LiveWindow.addActuator("Shooter", "feederSol", shooterfeederSol);
        
        shooterfeederIn = new DigitalInput(1, 6);
	LiveWindow.addSensor("Shooter", "feederIn", shooterfeederIn);
        
        shooterfeederOut = new DigitalInput(1, 7);
	LiveWindow.addSensor("Shooter", "feederOut", shooterfeederOut);
        
        shooterfrisbeeLoadedSw = new DigitalInput(1, 13);
	LiveWindow.addSensor("Shooter", "frisbeeLoadedSw", shooterfrisbeeLoadedSw);
        
        shooterfrisbeeOutSw = new DigitalInput(1, 14);
	LiveWindow.addSensor("Shooter", "frisbeeOutSw", shooterfrisbeeOutSw);
        
        shooterfrisbeePushSol = new Relay(1, 7);
	LiveWindow.addActuator("Shooter", "frisbeePushSol", shooterfrisbeePushSol);
        
        retrieverSpike1 = new Relay(1, 2);
	LiveWindow.addActuator("Retriever", "Spike1", retrieverSpike1);
        
        retrieverSpike2 = new Relay(1, 3);
	LiveWindow.addActuator("Retriever", "Spike2", retrieverSpike2);
        
        retrieverhopperIn = new DigitalInput(1, 8);
	LiveWindow.addSensor("Retriever", "hopperIn", retrieverhopperIn);
        
        retrieverhopperOut = new DigitalInput(1, 9);
	LiveWindow.addSensor("Retriever", "hopperOut", retrieverhopperOut);
        
        retrieverdeployIn = new DigitalInput(1, 10);
	LiveWindow.addSensor("Retriever", "deployIn", retrieverdeployIn);
        
        retrieverdeployOut = new DigitalInput(1, 11);
	LiveWindow.addSensor("Retriever", "deployOut", retrieverdeployOut);
        
        retrieverfrisbeeInSw = new DigitalInput(1, 12);
	LiveWindow.addSensor("Retriever", "frisbeeInSw", retrieverfrisbeeInSw);
        
        retrieverdeploySol = new Relay(1, 4);
	LiveWindow.addActuator("Retriever", "deploySol", retrieverdeploySol);
        
        retrieverhopperSol = new Relay(1, 5);
	LiveWindow.addActuator("Retriever", "hopperSol", retrieverhopperSol);
        
        climberCompressor = new Compressor(1, 1, 1, 1);
	
        
        climbersmallSol = new DoubleSolenoid(1, 1, 2);      
	
        
        climbersmallIn = new DigitalInput(2, 9);
	LiveWindow.addSensor("Climber", "smallIn", climbersmallIn);
        
        climbersmallOut = new DigitalInput(2, 10);
	LiveWindow.addSensor("Climber", "smallOut", climbersmallOut);
        
        climbertallBottomSol = new DoubleSolenoid(1, 3, 4);      
	
        
        climbertallBottomIn = new DigitalInput(2, 11);
	LiveWindow.addSensor("Climber", "tallBottomIn", climbertallBottomIn);
        
        climbertallBottomOut = new DigitalInput(2, 12);
	LiveWindow.addSensor("Climber", "tallBottomOut", climbertallBottomOut);
        
        climbertallTopSol = new DoubleSolenoid(1, 5, 6);      
	
        
        climbertallTopIn = new DigitalInput(2, 13);
	LiveWindow.addSensor("Climber", "tallTopIn", climbertallTopIn);
        
        climbertallTopOut = new DigitalInput(2, 14);
	LiveWindow.addSensor("Climber", "tallTopOut", climbertallTopOut);
        
        climbersliderSol = new DoubleSolenoid(1, 7, 8);      
	
        
        climbersliderIn = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Climber", "sliderIn", climbersliderIn);
        
        climbersliderOut = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Climber", "sliderOut", climbersliderOut);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }
}
