// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package team4188_2013.subsystems;
import team4188_2013.RobotMap;
import team4188_2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *@author Tobore Tasker
 */
public class Shooter extends Subsystem {
    private PIDController tiltPID;
    Timer timer;
    private boolean timerRunning = false;    
    public boolean 
            isOn = false,
            isLoaderExtended = false,
            isPusherExtended = false,
            automaticTilt = true;
    public double increment = 0.0;
    static double //for testing, improper format for variables
//        MAX_VOLT_FIRST = 9.0,
//        MAX_VOLT_SECOND = 12.0,
//        MAX_VOLT_TILT = 12.0, 
//        P = 0.05,
//        I = 0.000,
//        D = 0.000,
        adjustment = 0.0,
        potValue = 0.0,
        setPoint = 0,
        turnAngle = 0,
        tiltAngle = 0;
    final static double 
        MAX_VOLT_FIRST = 9.0,
        MAX_VOLT_SECOND = 12.0,
        MAX_VOLT_TILT = 12.0,    
        FORWARD = 1.0, 
        OFF = 0.0,
//        M = -2.46,
//        B = 393.1,
        tiltTolerance = 3.0,
        P = 0.05, 
        I = 0.000, 
        D = 0.0,     
        PID_LOOP_TIME = .05,
        SETTLED_TIME = 2.0;            ;
    private static final double PNEUMATIC_DELAY_SECONDS = 0.1;
    double maxVoltageSecondWheel = MAX_VOLT_SECOND;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel tiltPot = RobotMap.shootertiltPot;
    CANJaguar firstWheel = RobotMap.shooterfirstWheel;
    CANJaguar secondWheel = RobotMap.shootersecondWheel;
    CANJaguar tilt = RobotMap.shootertilt;
    DoubleSolenoid feederSol = RobotMap.shooterfeederSol;
    DoubleSolenoid pushSol = RobotMap.shooterpushSol;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ManualTilt());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
    }
    public void init(){
        SmartDashboard.putNumber("First", MAX_VOLT_FIRST);
        SmartDashboard.putNumber("Second", MAX_VOLT_SECOND);
        SmartDashboard.putNumber("Tilt", MAX_VOLT_TILT);
        SmartDashboard.putNumber("shooterP", P);
        SmartDashboard.putNumber("shooterI", I);
        SmartDashboard.putNumber("shooterD", D);
        SmartDashboard.putNumber("TurnAngle", turnAngle);
        SmartDashboard.putNumber("TiltAngle", tiltAngle);        
        pushDoNothing();
        loaderDoNothing();
        try{
            firstWheel.configMaxOutputVoltage(MAX_VOLT_FIRST);
            secondWheel.configMaxOutputVoltage(MAX_VOLT_SECOND);
            tilt.configMaxOutputVoltage(MAX_VOLT_TILT);
            tilt.configNeutralMode(CANJaguar.NeutralMode.kBrake);
            firstWheel.configNeutralMode(CANJaguar.NeutralMode.kCoast);
            secondWheel.configNeutralMode(CANJaguar.NeutralMode.kCoast);
           } catch (CANTimeoutException ex) {ex.printStackTrace();}
        tiltPID = new PIDController(P,I,D,tiltPot,tilt,PID_LOOP_TIME);
        //tiltPID.setPercentTolerance(1.0);
        tiltPID.setInputRange(0, 700);
        tiltPID.setOutputRange(-0.2, 1.0);    
        isOn = false;
        isLoaderExtended = false;
        timer = new Timer();        
    }
    public boolean getAutoTiltMode(){
        return automaticTilt;
    }
    public void setAutoTiltMode(boolean mode){
        automaticTilt = mode;
    }
    public double getTiltAngle(){
        return SmartDashboard.getNumber("TiltAngle"); 
    }
    public void disablePID(){
        tiltPID.disable();
    }
    public void enablePID(){
        tiltPID.enable();
    }
    public boolean isPIDEnable(){
        return tiltPID.isEnable();
    }
    public void setShooterPID(){
//        P = SmartDashboard.getNumber("shooterP");
//        I = SmartDashboard.getNumber("shooterI");
//        D = SmartDashboard.getNumber("shooterD");
        tiltPID.setPID(P, I, D);
     }
    public void setMaxVoltages(){
//        MAX_VOLT_FIRST = SmartDashboard.getNumber("First");
//        MAX_VOLT_SECOND = SmartDashboard.getNumber("Second");
//        MAX_VOLT_TILT = SmartDashboard.getNumber("Tilt");
        try{
            firstWheel.configMaxOutputVoltage(MAX_VOLT_FIRST);
            secondWheel.configMaxOutputVoltage(MAX_VOLT_SECOND);
            tilt.configMaxOutputVoltage(MAX_VOLT_TILT);    
           } catch (CANTimeoutException ex) {ex.printStackTrace();}            
    }    
    public boolean autoTilt(){
       // System.out.println("Current SetPoint: " + getSetPoint());
        tiltPID.setSetpoint(getSetPoint());
        if(!tiltPID.isEnable()){
            //potValue = angle + getCalibration();
            tiltPID.setSetpoint(getSetPoint());
            tiltPID.enable();
            System.out.println("pidGet " + tiltPot.pidGet());
           // System.out.println("Input: " + angle);
            System.out.println("PotValue" + potValue);
            System.out.println("Calibration " + getCalibration());
        }
       // potValue = distance * M + B;
        
        
        //System.out.println("Pot." + getTiltValue());
       // System.out.println("Calibrated Pot. "+ getCalibratedValue());
        
        //System.out.println("pidOutput" + tiltPID.get());
//        if(thereYet(potValue)) {
//            System.out.println("Shooter PID done");
//             //tiltPID.disable();
//            return true;
//        }
        return false;        
    }
   public boolean thereYet(double target) 
   {
        if(onTarget(target) && !timerRunning) 
        {
            timer.start();
            timerRunning = true;
        }
        else if (!onTarget(target) && timerRunning)
        {
            timer.stop();
            timer.reset();
            timerRunning = false;
        }
        return timer.get() >= SETTLED_TIME;
    }    
   public boolean onTarget(double potValue){
       boolean toReturn = false;
       double difference;
       System.out.println("Tilt Value" + getTiltValue());
       difference = Math.abs(potValue - getTiltValue());
       System.out.println("Difference" + difference);
       if(difference > tiltTolerance){
           toReturn = true;
       }
       else{
           toReturn = false;
       }
       return toReturn;
       
   }
   public void updateSetPoint(double input){
       setPoint = input + getCalibration();
       //autoTilt(setPoint);
    }
   public double getSetPoint(){
       return setPoint;
   }
   public double getUnCalibratedSetPoint(){
       return setPoint - getCalibration();
   }
    public void setVoltageFirstWheel(double adjust){
        try{
        firstWheel.configMaxOutputVoltage(adjust);
        } catch (CANTimeoutException ex) {ex.printStackTrace();} 
        maxVoltageSecondWheel = adjust;
    }
    public double getMaxVoltageFirstWheel(){
        return maxVoltageSecondWheel;
    }
    public void shooterOn(double modifier){
        try{
            firstWheel.setX(FORWARD * modifier);
            secondWheel.setX(FORWARD * modifier);
          } catch (CANTimeoutException ex) {ex.printStackTrace();}  
        isOn = true;
        System.out.println("Shooter On!");
    }
    public void shooterOff(){
        try{
            firstWheel.setX(OFF);
            secondWheel.setX(OFF);
          } catch (CANTimeoutException ex) {ex.printStackTrace();} 
        isOn = false;
        increment = 0.0;
        System.out.println("Shooter Off!");
    }
    public boolean isOn(){
        SmartDashboard.putBoolean("Shooter On:", isOn);
        return isOn;
    }    
    public void manualAim(double input){
        if(tiltPID.isEnable())tiltPID.disable();
        try {
            tilt.setX(input);   
        } catch (CANTimeoutException ex) {ex.printStackTrace();}
    }    
//    public void idleTilt(){
//        try{
//            tilt.setX(idle);
//        } catch (CANTimeoutException ex) {ex.printStackTrace();}    
//    
//    }
    public void adjustSpeed(double throttle){
            try{
            firstWheel.setX(FORWARD * throttle);
            secondWheel.setX(FORWARD * throttle);
          } catch (CANTimeoutException ex) {ex.printStackTrace();} 
    }
    public double getTiltVoltage(){
        return tiltPot.getVoltage();
    }
    public double getTiltValue(){
        return tiltPot.getAverageValue();
    }
    public double getCalibratedValue(){
        return Math.abs(getTiltValue() - adjustment);
    }
    public void setCalibration(double input){
        adjustment = input;
    }
    public double getCalibration(){
        return adjustment;
    }
    //returns true when limit swich is pressed
    public boolean getBottowSw(){
        boolean switchedBottom = false;
        try {
            switchedBottom = tilt.getReverseLimitOK();
        } catch (CANTimeoutException ex) {ex.printStackTrace();}
        return !switchedBottom;
    }
    public boolean getTopSw(){
        boolean switchedTop = false;
        try {
            switchedTop = tilt.getForwardLimitOK();
        } catch (CANTimeoutException ex) {ex.printStackTrace();}      
        return !switchedTop;
    }
    public void extendLoader(){
        feederSol.set(DoubleSolenoid.Value.kForward);
        Timer.delay(PNEUMATIC_DELAY_SECONDS);
        feederSol.set(DoubleSolenoid.Value.kOff);
        isLoaderExtended = true;
    }
    public void retractLoader(){
        feederSol.set(DoubleSolenoid.Value.kReverse);
        Timer.delay(PNEUMATIC_DELAY_SECONDS);
        feederSol.set(DoubleSolenoid.Value.kOff);
        isLoaderExtended = false;
    }
    public void extendPusher(){
        pushSol.set(DoubleSolenoid.Value.kForward);
        Timer.delay(PNEUMATIC_DELAY_SECONDS);
        pushSol.set(DoubleSolenoid.Value.kOff);
        isPusherExtended = true;
    }
    public void retractPusher(){
        pushSol.set(DoubleSolenoid.Value.kReverse);
        Timer.delay(PNEUMATIC_DELAY_SECONDS);
        pushSol.set(DoubleSolenoid.Value.kOff);
        isPusherExtended = false;
    }
    public boolean isPusherExtended(){
        return isPusherExtended;
    }
    public boolean isLoaderExtended(){
        return isLoaderExtended;
    }
    public void loaderDoNothing(){
       feederSol.set(DoubleSolenoid.Value.kOff);
    }
    public void pushDoNothing(){
        pushSol.set(DoubleSolenoid.Value.kOff);
    }
}
