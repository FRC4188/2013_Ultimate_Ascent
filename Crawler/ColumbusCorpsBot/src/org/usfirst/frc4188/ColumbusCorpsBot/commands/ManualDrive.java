// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4188.ColumbusCorpsBot.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4188.ColumbusCorpsBot.Robot;
import org.usfirst.frc4188.ColumbusCorpsBot.RobotMap;
/**
 *
 */
public class  ManualDrive extends Command {
        double direction=0;
    public ManualDrive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
         if(Robot.oi.getPilotStick().getTrigger())
        {
            Robot.drivetrain.resetGyro();
        }
        if (Robot.oi.getPilotStick().getRawButton(11)&&RobotMap.fOM){
            RobotMap.fOM = false;
        }
        else if (Robot.oi.getPilotStick().getRawButton(12)&&!RobotMap.fOM){
            RobotMap.fOM = true;
        }
        if(RobotMap.fOM){
            direction=Robot.drivetrain.getGyroAngle();
        }
        else{
            direction=0.0;
        }
    RobotMap.Drive.mecanumDrive_Cartesian((Robot.oi.pilotStick.getX())*-1*Robot.oi.pilotStick.getThrottle()
            ,Robot.oi.pilotStick.getY()*Robot.oi.pilotStick.getThrottle()
            ,Robot.oi.pilotStick.getTwist()*-1*Robot.oi.pilotStick.getThrottle(), direction);

    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
